{
    "studiesForUmbrella":"select s.study_id,s.study_name from study s,umbrella u,umbrella_study us where u.umbrella_name = ? and u.umbrella_id = us.umbrella_id and us.study_id = s.study_id",

    "insertOperator":"insert into operator(operator_auth0_id,umbrella_id) (select ?,u.umbrella_id, from umbrella u where u.umbrella_name = ?)",

    "studiesForClientQuery":"""
    select
    s.study_name,
    u.umbrella_name
    from
    client c,
    umbrella u,
    umbrella_study s,
    client_study_access acl
    where
    u.umbrella_name = ?
    and
    c.client_name = ?
    and
    acl.umbrella_study_id = s.umbrella_study_id
    and
    acl.client_id = c.client_id
    and
    s.umbrella_id = u.umbrella_id
    """

    // does not take into account study-based restrictions.
    // just lists which participants an operator has access to
    "governedParticipantsForOperatorQuery":"""
    select
    p.guid,
    g.alias
    from
    user o,
    user p,
    user_governance g
    where
    o.guid = ?
    and
    o.user_id = g.operator_user_id
    and
    p.user_id = g.participant_user_id
    and
    g.is_active = 1
    """

    "getUserGuidFromUserIdQuery" : "select guid from user where user_id = ?"

    "governanceAliasExistsQuery":"select 1 from user_governance where operator_user_id = (select user_id from user where guid = ?) and alias = ?"

    "getUserIdFromGuidQuery" : "select user_id from user where guid = ?"

    "getUserIdFromHruidQuery" : "select user_id from user where hruid = ?"

    "userExistsQuery": """
    select 1 from user u, auth0_tenant t where u.auth0_user_id = ? and u.auth0_tenant_id = t.auth0_tenant_id and t.auth0_domain = ?
    """

    "userExistsGuidQuery": "select 1 from user where guid = ?"

    "profileExistsQuery": "select 1 from user_profile where user_id = (select user_id  from user where guid = ?)"

    "userGuidForAuth0IdQuery": """
    select u.guid from user u, auth0_tenant t where u.auth0_user_id = ? and t.auth0_domain = ? and u.auth0_tenant_id = t.auth0_tenant_id
    """

    "insertUser": """
    insert into user(auth0_user_id,is_locked,guid,created_by_client_id, hruid, auth0_tenant_id, created_at, updated_at, expires_at)
    (select ?,false,?,c.client_id,?,t.auth0_tenant_id,?,?,?
    from client c, auth0_tenant t where c.auth0_client_id = ? and c.auth0_tenant_id = t.auth0_tenant_id)
    """

    "upsertFirstAndLastName": """
    INSERT INTO
        user_profile
    (first_name,
    last_name,user_id)
    select
      ?,
      ?,
        u.user_id
     from user u
     where
        u.guid=?
    ON DUPLICATE KEY UPDATE
      last_name=VALUES(last_name),
      first_name=VALUES(first_name)
    """

    "checkUserGuidQuery":"select 1 from user where guid = ?"

    "insertGovernedUserStmt": "insert into user_governance(operator_user_id,participant_user_id,alias,is_active) values ((select user_id from user where guid = ?),(select user_id from user where guid = ?),?,?)"

    "userClientRevocationQuery": """
    select
    u.is_locked,
    c.is_revoked
    from
    user u,
    client c
    where
    u.guid = ?
    and
    c.auth0_client_id = ?
    """

    "listUserActivitiesQuery": """
    -- Fetches the activity instance summaries for the user
    -- sorted by the display order (ASC) and creation date (DESC)
    -- Summaries are translated into all available languages
    SELECT
        act.study_activity_code,
        act.edit_timeout_sec,
        act.is_write_once,
        act.exclude_from_display,
        act.is_followup,
        actv.version_tag,
        actv.revision_id,
        actr.start_date,
        ai.activity_instance_guid,
        ai.activity_instance_id,
        ai.created_at,
        ai.is_readonly,
        ai.is_hidden,
        (SELECT activity_type_code FROM activity_type WHERE activity_type_id = act.activity_type_id) AS activity_type_code,
        i18n_act.name        AS activity_name_trans,
        i18n_act.title       AS activity_title_trans,
        i18n_act.subtitle    AS activity_subtitle_trans,
        i18n_act.description AS activity_description_trans,
        i18n_sastr.translation_text AS activity_summary_trans,
        i18natnt.translation_text   AS activity_type_name,
        lc.iso_language_code,
        (SELECT form_type_code FROM form_type WHERE form_type_id = fa.form_type_id) AS form_type_code,
        (SELECT activity_instance_status_type_code
           FROM activity_instance_status_type
          WHERE activity_instance_status_type_id = ais.activity_instance_status_type_id
        ) AS activity_instance_status_type_code
    FROM
        user AS u
        JOIN activity_instance              AS ai    ON ai.participant_id = u.user_id
        JOIN study_activity                 AS act   ON ai.study_activity_id = act.study_activity_id
        JOIN activity_version               AS actv  ON act.study_activity_id = actv.study_activity_id
        JOIN revision                       AS actr  ON actv.revision_id = actr.revision_id
        JOIN activity_instance_status       AS ais   ON ais.activity_instance_id = ai.activity_instance_id
        JOIN umbrella_study                 AS s     ON s.umbrella_study_id = act.study_id
        JOIN i18n_study_activity AS i18n_act
            ON i18n_act.study_activity_id = act.study_activity_id
        JOIN language_code AS lc ON i18n_act.language_code_id = lc.language_code_id
        -- Translation tables are joined with below
        JOIN i18n_activity_type_name_trans AS i18natnt
            ON i18natnt.activity_type_id = act.activity_type_id AND i18natnt.language_code_id = lc.language_code_id
        LEFT JOIN i18n_study_activity_summary_trans AS i18n_sastr
            ON i18n_sastr.study_activity_id = act.study_activity_id
               AND i18n_sastr.language_code_id = lc.language_code_id
               AND i18n_sastr.activity_instance_status_type_id = ais.activity_instance_status_type_id
        LEFT JOIN form_activity             AS fa    ON fa.study_activity_id = act.study_activity_id
    WHERE
        -- Leave only the latest activity instance status
        ais.updated_at = (
            SELECT
                MAX(stat.updated_at)
            FROM
                activity_instance_status AS stat
            WHERE
                stat.activity_instance_id = ais.activity_instance_id
        )
        AND (
                (ai.created_at >= actr.start_date AND actr.end_date is null)
                OR (ai.created_at >= actr.start_date AND ai.created_at < actr.end_date)
            )
        AND s.guid = ?
        AND u.guid = ?
    ORDER BY
        act.display_order ASC,
        ai.created_at DESC
    """

    "patchSexStmt": "update user_profile set sex = ? where user_id = ?"

    "patchPreferredLanguageStmt": """
    update user_profile
    set preferred_language_id =
    (select language_code_id from language_code where iso_language_code = ?)
    where user_id = ?
     """

	// Fetches translations for given template_variable_ids
    "templateVariablesWithTranslationsQuery":"""
	select
	tv.variable_name,
	i18n_ts.substitution_value
	from
	template_variable tv,
	i18n_template_substitution i18n_ts
	where
	tv.template_variable_id = i18n_ts.template_variable_id
	and tv.template_id = ?
	and i18n_ts.language_code_id = ?
    """,

    "activityInstance": {
        "createInstanceStmt": """
            insert into activity_instance (activity_instance_guid, study_activity_id, participant_id, created_at, is_readonly)
                values (?, ?, ?, ?, ?)
        """
        "deleteInstanceStmt": """
            delete from activity_instance where activity_instance_guid = ?
        """
        "queryIdByGuid" : """
            select activity_instance_id from activity_instance where activity_instance_guid = ?
        """
        "queryTranslatedSummaryByGuid": """
            SELECT
                 i18n_act.title    as activity_title,
                 i18n_act.subtitle as activity_subtitle,
            	   i18n_atnt.translation_text as activity_type_name,
            	   i18n_aistnt.translation_text as activity_instance_status_type_name,
            	   lc.iso_language_code
              FROM activity_instance as ai
            	   JOIN study_activity as sa ON ai.study_activity_id = sa.study_activity_id
            	   JOIN activity_type as atype ON sa.activity_type_id = atype.activity_type_id
                 JOIN i18n_study_activity as i18n_act ON i18n_act.study_activity_id = sa.study_activity_id
                 JOIN language_code as lc ON lc.language_code_id = i18n_act.language_code_id
            	   JOIN activity_instance_status as ais ON ai.activity_instance_id = ais.activity_instance_id
                 JOIN i18n_activity_type_name_trans as i18n_atnt ON i18n_atnt.activity_type_id = atype.activity_type_id AND i18n_atnt.language_code_id=lc.language_code_id
                 JOIN activity_instance_status_type as aist ON ais.activity_instance_status_type_id = aist.activity_instance_status_type_id
            	   JOIN i18n_activity_instance_status_type_name_trans as i18n_aistnt ON i18n_aistnt.activity_instance_status_type_id = aist.activity_instance_status_type_id AND i18n_aistnt.language_code_id=lc.language_code_id
             WHERE
            	ai.activity_instance_guid = ?
                and
            	ais.updated_at = (
            	   select max(ais2.updated_at)
            	   from
            	   activity_instance_status ais2
            	   where
            	   ais2.activity_instance_id = ais.activity_instance_id
               )
             order by
            	ai.created_at desc
        """
    }

    "studyActivity": {
        "queryAutoInstantiatableActivitiesByClientId": """
            select
            sa.study_activity_id
            from
            client__umbrella_study cus,
            study_activity sa
            where
            cus.umbrella_study_id = sa.study_id
            and cus.client_id = ?
            and sa.instantiate_upon_registration = 1
        """
        "queryCodeByStudyGuidActivityTypeCodeAndFormType": """
            select
                  sa.study_activity_code
              from
                  study_activity as sa,
                  form_activity as fa,
                  activity_type as atype,
                  form_type as ftype,
                  umbrella_study as us
             where
                 sa.study_id = us.umbrella_study_id
                 and sa.study_activity_id = fa.study_activity_id
                 and sa.activity_type_id = atype.activity_type_id
                 and fa.form_type_id = ftype.form_type_id
                 and us.guid = ?
                 and atype.activity_type_code = 'FORMS'
                 and ftype.form_type_code = ?
             order by
                 sa.display_order asc
        """
        "queryActivityInstanceGuidAndParticipantId": """
            select ai.activity_instance_guid,
                   ai.participant_id
              from umbrella_study as us,
                   study_activity as sa,
                   activity_instance as ai,
                   activity_type as atype
              where us.guid = ?
                and sa.study_id = us.umbrella_study_id
                and atype.activity_type_code = ?
                and sa.activity_type_id = atype.activity_type_id
                and sa.study_activity_id = ai.study_activity_id
        """
        "queryAllConsentsByUserAndStudyGuids": """
            select sa.study_activity_id,
            sa.study_activity_code,
            instance.activity_instance_guid,
              (
                select e.expression_text
                from consent_condition as cc, expression as e, revision as r
                where sa.study_activity_id = cc.form_activity_id
                and cc.consented_expression_id = e.expression_id
                and cc.revision_id = r.revision_id
                and r.start_date <= instance.created_at
                and (r.end_date is null or instance.created_at < r.end_date)
              ) as consented_expression
            from umbrella_study as us,
              activity_type as atype,
              form_type as ftype,
              form_activity as fa,
              study_activity as sa
            left join (
              select ai.study_activity_id, ai.created_at, ai.activity_instance_guid
              from user as u, activity_instance as ai
              where u.guid = ?
              and u.user_id = ai.participant_id
            ) as instance
            on sa.study_activity_id = instance.study_activity_id
            where us.guid = ?
            and atype.activity_type_code = 'FORMS'
            and ftype.form_type_code = 'CONSENT'
            and sa.study_id = us.umbrella_study_id
            and sa.study_activity_id = fa.study_activity_id
            and sa.activity_type_id = atype.activity_type_id
            and fa.form_type_id = ftype.form_type_id
        """
        "queryLatestConsentByGuids": """
            select sa.study_activity_id,
            instance.activity_instance_guid,
              (
                select e.expression_text
                from consent_condition as cc, expression as e, revision as r
                where sa.study_activity_id = cc.form_activity_id
                and cc.consented_expression_id = e.expression_id
                and cc.revision_id = r.revision_id
                and r.start_date <= instance.created_at
                and (r.end_date is null or instance.created_at < r.end_date)
              ) as consented_expression
            from umbrella_study as us,
              activity_type as atype,
              form_type as ftype,
              form_activity as fa,
              study_activity as sa
            left join (
              select ai.study_activity_id, ai.created_at, ai.activity_instance_guid
              from user as u, activity_instance as ai
              where u.guid = ?
              and u.user_id = ai.participant_id
            ) as instance
            on sa.study_activity_id = instance.study_activity_id
            where us.guid = ?
            and sa.study_activity_code = ?
            and atype.activity_type_code = 'FORMS'
            and ftype.form_type_code = 'CONSENT'
            and sa.study_id = us.umbrella_study_id
            and sa.study_activity_id = fa.study_activity_id
            and sa.activity_type_id = atype.activity_type_id
            and fa.form_type_id = ftype.form_type_id
            order by
              instance.created_at desc
            limit 1
        """
    }

    "consentElection": {
        "queryLatestElectionsByActivityCode": """
            select ce.election_stable_id,
              e.expression_text as selected_expression
            from consent_election as ce,
              expression as e,
              revision as r,
              form_activity as fa,
              study_activity as sa
            where sa.study_activity_code = ?
            and sa.study_id = ?
            and sa.study_activity_id = fa.study_activity_id
            and fa.study_activity_id = ce.form_activity_id
            and ce.election_selected_expression_id = e.expression_id
            and ce.revision_id = r.revision_id
            and r.end_date is null
        """
        "queryElectionsByActivityAndInstanceGuids": """
            select ce.election_stable_id,
              e.expression_text as selected_expression
            from consent_election as ce,
              expression as e,
              revision as r,
              form_activity as fa,
              study_activity as sa,
              (
                select ce.form_activity_id, ce.election_stable_id, max(r.start_date) as start_date
                from consent_election as ce, revision as r, activity_instance as ai
                where ai.activity_instance_guid = ?
                and ce.revision_id = r.revision_id
                and (
                  (r.end_date is null and r.start_date <= ai.created_at) or
                  (r.end_date is not null and r.start_date <= ai.created_at and ai.created_at <= r.end_date)
                )
                group by ce.form_activity_id, ce.election_stable_id
              ) as latest_rev
            where sa.study_activity_code = ?
            and sa.study_id = ?
            and sa.study_activity_id = fa.study_activity_id
            and fa.study_activity_id = ce.form_activity_id
            and ce.election_selected_expression_id = e.expression_id
            and ce.revision_id = r.revision_id
            and ce.form_activity_id = latest_rev.form_activity_id
            and ce.election_stable_id = latest_rev.election_stable_id
            and r.start_date = latest_rev.start_date
        """
    }

    "activities": {
        "formActivityByGuidQuery": """
            select (select form_type_code from form_type where form_type_id = fa.form_type_id) as form_type_code,
                   (select list_style_hint_code from list_style_hint where list_style_hint_id = fas.list_style_hint_id) as list_style_hint_code,
                   fas.readonly_hint_template_id,
                   fas.introduction_section_id,
                   fas.closing_section_id,
                   i18n_act.title as activity_title,
                   i18n_act.subtitle as activity_subtitle,
                   i18n_aistnt.translation_text as activity_instance_status_type_name,
                   aist.activity_instance_status_type_code,
                   ai.activity_instance_id,
                   sa.study_activity_id,
                   sa.edit_timeout_sec,
                   sa.is_write_once,
                   sa.is_followup,
                   ai.is_readonly,
                   ai.created_at,
                   ai.first_completed_at,
                   sa.study_activity_code,
                   fas.last_updated_text_template_id,
                   fas.last_updated
              from study_activity as sa
              join form_activity as fa on fa.study_activity_id = sa.study_activity_id
              join activity_instance as ai on ai.study_activity_id = sa.study_activity_id
              join activity_instance_status as ais on ais.activity_instance_id = ai.activity_instance_id
              join activity_instance_status_type as aist on aist.activity_instance_status_type_id = ais.activity_instance_status_type_id
              join language_code as lc on lc.iso_language_code = ?
              join i18n_activity_instance_status_type_name_trans as i18n_aistnt
                   on i18n_aistnt.activity_instance_status_type_id = aist.activity_instance_status_type_id
                   and i18n_aistnt.language_code_id = lc.language_code_id
              join i18n_study_activity as i18n_act
                   on i18n_act.study_activity_id = sa.study_activity_id
                   and i18n_act.language_code_id = lc.language_code_id
              left join form_activity_setting as fas on fas.form_activity_id = fa.study_activity_id
              left join revision as rev on rev.revision_id = fas.revision_id
             where ai.activity_instance_guid = ?
               and (fas.form_activity_setting_id is null or (
                   rev.start_date <= ai.created_at and (rev.end_date is null or ai.created_at < rev.end_date)))
             order by ais.updated_at desc
             limit 1
        """
    }

    "validations": {
        "queryAllByQuestionAndLangId": """
            select v.validation_id,
                   v.allow_save,
                   vt.validation_type_code,
                   i18n_vmt.translation_text,
                   v.correction_hint_template_id
              from question__validation as qv,
                   validation as v,
                   validation_type as vt,
                   i18n_validation_msg_trans as i18n_vmt,
                   activity_instance as ai,
                   revision as r1
             where ai.activity_instance_guid = ?
               and qv.question_id = ?
               and i18n_vmt.language_code_id = ?
               and qv.validation_id = v.validation_id
               and v.revision_id = r1.revision_id
               and r1.start_date <= ai.created_at
               and (r1.end_date is null or ai.created_at < r1.end_date)
               and v.validation_type_id = vt.validation_type_id
               and vt.validation_type_id = i18n_vmt.validation_type_id
        """
        "minAndMaxLengthValidationQuery" : "select min_length, max_length from length_validation where validation_id = ?"
        "regexPatternValidationQuery" : "select regex_pattern from regex_validation where validation_id = ?"
        "numOptionsSelectedValidationQuery": "select min_selections, max_selections from num_options_selected_validation where validation_id = ?"
    }

     "firecloud" : {
         "getStudyNamesForUserAdminGuid": """
             select us.study_name,
                    us.umbrella_study_id,
                    us.guid
             from umbrella_study as us,
                  study_admin as sa
             where sa.user_id = (select user_id from user where guid = ?)
               and us.umbrella_study_id = sa.umbrella_study_id
         """
         "getStudyParticipantCount": """
             select count(distinct ai.participant_id) as count_par
               from activity_instance as ai,
                    study_activity as sa,
                    umbrella_study as us
               where us.umbrella_study_id = ?
                 and us.umbrella_study_id = sa.study_id
                 and sa.study_activity_id = ai.study_activity_id
         """
         "hasAdminAccessQuery": """
             select us.guid
               from umbrella_study as us,
                    study_admin as sa
               where sa.user_id = (select user_id from user where guid=?)
                 and sa.umbrella_study_id = us.umbrella_study_id
         """
         "serviceAccountPathWithStudyQuery": """
             select fsa.account_key_location
                 from study_admin as sa,
                 firecloud_admin_service_account as fasa,
                 firecloud_service_account as fsa,
                 user as u,
                 umbrella_study as us
             where u.guid = ?
               and sa.user_id = u.user_id
               and us.guid = ?
               and sa.umbrella_study_id = us.umbrella_study_id
               and sa.study_admin_id = fasa.study_admin_id
               and fasa.firecloud_service_account_id = fsa.firecloud_service_account_id
         """
         "serviceAccountPathWithoutStudyQuery": """
             select fsa.account_key_location
                 from study_admin as sa,
                 firecloud_admin_service_account as fasa,
                 firecloud_service_account as fsa,
                 user as u
             where u.guid = ?
               and sa.user_id = u.user_id
               and sa.study_admin_id = fasa.study_admin_id
               and fasa.firecloud_service_account_id = fsa.firecloud_service_account_id
         """
         "fireCloudStudyExport":"""
          select
          a.answer_id,
          u.guid as participant_guid,
          a_type.activity_type_code,
          qsc.stable_id,
          qt.question_type_code,
          q.is_restricted,
          (select ta.answer from text_answer ta where ta.answer_id = a.answer_id) as text_answer,
          (select ba.answer from boolean_answer ba where ba.answer_id = a.answer_id) as boolean_answer,
          (select group_concat(o.picklist_option_stable_id SEPARATOR ',')
                  from
                 picklist_option__answer poa,
                 picklist_option o
                 where
                 poa.answer_id = a.answer_id
                 and
                 o.picklist_option_id = poa.picklist_option_id) as selected_options,
          q.question_id,
          (select da.month from date_answer da where da.answer_id = a.answer_id),
          (select da.day from date_answer da where da.answer_id = a.answer_id),
          (select da.year from date_answer da where da.answer_id = a.answer_id)
          from
          user as u,
          activity_instance as ai,
          activity_type as a_type,
          study_activity as sa,
          answer as a,
          question as q,
          question_type as qt,
          question_stable_code as qsc,
          block__question as bq,
          block as b,
          form_section__block as fsb,
          form_section as fs,
          form_activity__form_section as fafs,
          umbrella_study as s
          where
          s.umbrella_study_id = sa.study_id
          and
          bq.block_id = b.block_id
          and
          bq.question_id = q.question_id
          and
          fsb.block_id = b.block_id
          and
          fsb.form_section_id = fs.form_section_id
          and
          fafs.form_activity_id = sa.study_activity_id
          and
          fafs.form_section_id = fs.form_section_id
          and
          qsc.question_stable_code_id = q.question_stable_code_id
          and
          qt.question_type_id = q.question_type_id
          and
          a.question_id = q.question_id
          and
          a_type.activity_type_id = sa.activity_type_id
          and
          ai.participant_id = u.user_id
          and
          sa.study_activity_id = ai.study_activity_id
          and
          q.study_activity_id = ai.study_activity_id
          and
          a.activity_instance_id = ai.activity_instance_id
          and
          not q.is_restricted
          and
          s.guid = ?
          and
          ai.created_at > ?
          order by q.question_id"""
     }

    "activityInstanceCreationValidationQuery": """
    select
    act.max_instances_per_user,
    (
      select count(1)
      from
      activity_instance ai,
      user u
      where
      ai.study_activity_id = act.study_activity_id
      and
      u.user_id = ai.participant_id
      and
      u.guid = ?
    ) as num_instances_for_user
    from
    study_activity act
    where
    act.study_activity_code = ?
    and act.study_id = ?
    """
}
