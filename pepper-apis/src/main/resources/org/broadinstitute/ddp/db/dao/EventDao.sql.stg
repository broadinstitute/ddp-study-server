group EventDao;

/**
 * Returns all event configurations for study/activity and event type
 */
eventConfigurationLookup() ::= <<
SELECT
     ec.event_configuration_id,
     ett.event_trigger_type_code event_trigger_type,
     eat.event_action_type_code event_action_type,
     ec.post_delay_seconds,
     ec.dispatch_to_housekeeping,
     (SELECT
         e.expression_text from expression e
     WHERE e.expression_id = ec.precondition_expression_id) as precondition_expression,
     (SELECT
         e.expression_text from expression e
     WHERE e.expression_id = ec.cancel_expression_id) as cancel_expression,
     ec.max_occurrences_per_user,
     md.gcp_topic,
     aist.activity_instance_status_type_code as instance_status_type,
     ast.study_activity_id as activity_status_trigger_study_activity_id,
     wst.workflow_state_id,
     wst.trigger_automatically,
     dnet.dsm_notification_event_type_code as dsm_notification_event_type,
     ann_act.message_template_id as message_template_id,
     nt.notification_type_code as notification_type,
     ns.service_code as notification_service_type,
     unea.notification_template_id,
     unea.linked_activity_id,
     pea.pdf_document_configuration_id as pdf_generation_document_configuration_id,
     unpdf.pdf_document_configuration_id as user_notification_document_configuration_id,
     unpdf.generate_if_missing,
     aica.study_activity_id as activity_instance_creation_study_activity_id,
     cp_target.copy_target as copy_answer_target,
     qsc.stable_id as copy_source_question_stable_id
FROM
     event_configuration ec
JOIN event_trigger et ON ec.event_trigger_id = et.event_trigger_id
JOIN event_trigger_type ett ON et.event_trigger_type_id = ett.event_trigger_type_id
JOIN event_action ea ON ec.event_action_id = ea.event_action_id
JOIN event_action_type eat ON ea.event_action_type_id = eat.event_action_type_id
JOIN umbrella_study study on ec.umbrella_study_id = study.umbrella_study_id
LEFT JOIN message_destination md on ea.message_destination_id = md.message_destination_id
LEFT JOIN activity_status_trigger ast ON ast.activity_status_trigger_id = ec.event_trigger_id
LEFT JOIN activity_instance_status_type aist ON ast.activity_instance_status_type_id = aist.activity_instance_status_type_id
LEFT JOIN workflow_state_trigger wst on wst.event_trigger_id = et.event_trigger_id
LEFT JOIN dsm_notification_trigger dnt ON dnt.dsm_notification_trigger_id = et.event_trigger_type_id
LEFT JOIN dsm_notification_event_type dnet ON dnet.dsm_notification_event_type_id = dnt.dsm_notification_event_type_id
LEFT JOIN user_announcement_event_action as ann_act on ann_act.event_action_id = ea.event_action_id
LEFT JOIN user_notification_event_action unea on unea.user_notification_event_action_id = ea.event_action_id
LEFT JOIN notification_type nt on nt.notification_type_id = unea.notification_type_id
LEFT JOIN notification_service ns on ns.notification_service_id = unea.notification_service_id
LEFT JOIN pdf_generation_event_action as pea on pea.event_action_id = ea.event_action_id
LEFT JOIN user_notification_pdf unpdf on unpdf.user_notification_event_action_id = ea.event_action_id
LEFT JOIN activity_instance_creation_action aica ON aica.activity_instance_creation_action_id = ea.event_action_id
LEFT JOIN copy_answer_event_action as cp_answer on cp_answer.event_action_id=ea.event_action_id
LEFT JOIN question_stable_code as qsc on qsc.question_stable_code_id=cp_answer.source_question_stable_id
LEFT JOIN copy_answer_target cp_target on cp_target.copy_answer_target_id=cp_answer.copy_answer_target_id
>>

getEventConfigurationsForStudyIdAndTriggerType() ::= <<
<eventConfigurationLookup()>
    where
        ec.umbrella_study_id = :studyId
        and ett.event_trigger_type_code = :eventTriggerType
        and ec.is_active = 1
>>

getActiveDispatchConfigsByStudyIdAndTrigger() ::= <<
<getEventConfigurationsForStudyIdAndTriggerType()>
    and ec.dispatch_to_housekeeping = 1
>>

getActivityStatusEventConfigurations() ::= <<
<eventConfigurationLookup()>
    LEFT JOIN activity_instance ai ON ai.study_activity_id = ast.study_activity_id
    where
        ai.activity_instance_id = :activityInstanceId
        and aist.activity_instance_status_type_code = :status
        and ec.is_active = 1
>>

getNotificationAttachmentDetails() ::= <<
select
    pdf_cfg.pdf_document_configuration_id,
    notification_pdf.generate_if_missing
	from
    event_configuration evt_config
    join event_action act on evt_config.event_action_id = act.event_action_id
    join user_notification_event_action notification_action on notification_action.user_notification_event_action_id = act.event_action_id
    join user_notification_pdf notification_pdf on notification_action.user_notification_event_action_id = notification_pdf.user_notification_event_action_id
    join pdf_document_configuration pdf_cfg on notification_pdf.pdf_document_configuration_id = pdf_cfg.pdf_document_configuration_id
    where
    evt_config.event_configuration_id = :eventConfigId
>>

/**
 * Returns notification events related to workflow states
*/
getNotificationConfigsForWorkflowState() ::= <<
<eventConfigurationLookup()>
    where
    study.guid = :studyGuid
    and wst.workflow_state_id = :workflowStateId
    and ec.is_active = 1
    and eat.event_action_type_code = 'NOTIFICATION'
>>

/**
 * Returns notification events related to workflow states
*/
getNotificationConfigsForMailingListByEventType() ::= <<
<eventConfigurationLookup()>
    where
    study.guid = :studyGuid
    and ec.is_active = 1
    and eat.event_action_type_code = 'NOTIFICATION'
    and ett.event_trigger_type_code = :eventTriggerType
>>

/**
 * Returns all queued events that need to be posted to pubsub.
 */
getPendingConfigurations() ::= <<
select
    q.queued_event_id,
    q.operator_user_id,
    (select u.guid from user u where u.user_id = q.participant_user_id) as participant_guid,
    (select u.hruid from user u where u.user_id = q.participant_user_id) as participant_hruid,
    cfg.event_configuration_id,
    trigger_type.event_trigger_type_code,
    action_type.event_action_type_code,
    cfg.post_delay_seconds,
    cfg.max_occurrences_per_user,
    dest.gcp_topic,
    (select e.expression_text from expression e where e.expression_id = cfg.precondition_expression_id) as pex_precondition,
    (select e.expression_text from expression e where e.expression_id = cfg.cancel_expression_id) as pex_cancel_condition,
	study.guid as study_guid
from
    event_configuration cfg,
    event_trigger t,
    event_action act,
    message_destination dest,
    event_action_type action_type,
    event_trigger_type trigger_type,
    umbrella_study study,
    queued_event q
where
    study.umbrella_study_id = cfg.umbrella_study_id
    and q.event_configuration_id = cfg.event_configuration_id
    and trigger_type.event_trigger_type_id = t.event_trigger_type_id
    and action_type.event_action_type_id = act.event_action_type_id
    and dest.message_destination_id = act.message_destination_id
    and act.event_action_id = cfg.event_action_id
    and cfg.event_trigger_id = t.event_trigger_id
    and (q.post_after \< unix_timestamp() or q.post_after is null)
    and q.status_type_id is null
    and cfg.is_active = 1
>>

getNotificationDetailsForQueuedEvent() ::= <<
select
nt.notification_type_code,
ns.service_code,
sendgrid.api_key,
sendgrid.from_name,
sendgrid.from_email,
sendgrid.default_salutation,
p.first_name,
p.last_name,
t.template_key,
n.linked_activity_id,
s.web_base_url,
qn.email_address
from
queued_event q
join queued_notification qn on qn.queued_event_id = q.queued_event_id
join event_configuration ec on ec.event_configuration_id = q.event_configuration_id
join sendgrid_configuration sendgrid on sendgrid.umbrella_study_id = ec.umbrella_study_id
join event_action a on a.event_action_id = ec.event_action_id
join user_notification_event_action n on n.user_notification_event_action_id = a.event_action_id
join notification_type nt on nt.notification_type_id = n.notification_type_id
join notification_service ns on ns.notification_service_id = n.notification_service_id
join notification_template t on t.notification_template_id = n.notification_template_id
join umbrella_study s on s.umbrella_study_id = ec.umbrella_study_id
left join user u on u.guid = :userGuid
left join user_profile p on p.user_id = u.user_id
where
q.queued_event_id = :queuedEventId
>>

getTemplateSubstitutionsForQueuedNotification() ::= <<
select
sub.variable_name,
sub.value
from
queued_event q,
queued_notification qn,
queued_notification_template_substitution sub
where
q.queued_event_id = qn.queued_event_id
and
sub.queued_event_id = qn.queued_event_id
and
q.queued_event_id = :queuedEventId
>>

/**
 * Given a study guid and notification event type code, returns event configurations' ids
 * for the study id / DSM notification type. These ids are queued for Housekeeping later
 */
getDsmNotificationConfigurationIds() ::= <<
    select
        ec.event_configuration_id
    from
        event_configuration ec,
        event_trigger et,
        event_action ea,
        event_action_type eat,
        dsm_notification_trigger dnt,
        dsm_notification_event_type dnet,
        umbrella_study us,
        user_study_enrollment usen,
        enrollment_status_type est
    where
        ec.event_trigger_id = et.event_trigger_id
        and ec.event_action_id = ea.event_action_id
        and ea.event_action_type_id = eat.event_action_type_id
        and dnt.dsm_notification_trigger_id = et.event_trigger_id
        and dnt.dsm_notification_event_type_id = dnet.dsm_notification_event_type_id
        and ec.umbrella_study_id = us.umbrella_study_id
        and us.guid = :umbrellaStudyGuid
        and dnet.dsm_notification_event_type_code = :notificationEventTypeCode
        and eat.event_action_type_code = 'NOTIFICATION'
        and usen.user_id = (select user_id from user where guid = :userGuid)
        and usen.study_id = ec.umbrella_study_id
        and usen.enrollment_status_type_id = est.enrollment_status_type_id
        and est.enrollment_status_type_code = 'ENROLLED'
        and ec.is_active = 1
        and usen.valid_to is null
>>
