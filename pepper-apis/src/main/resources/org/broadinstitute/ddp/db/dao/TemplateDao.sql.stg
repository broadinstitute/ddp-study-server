group TemplateDao;

queryAllTranslatedVariablesByTemplateIdsAndLangId() ::= <<
select
  tv.template_id, tv.variable_name, coalesce(i18n_ts.substitution_value, i18n_ts_def.substitution_value) as substitution_value
from
  template_variable as tv
  left join i18n_template_substitution as i18n_ts on
    i18n_ts.template_variable_id = tv.template_variable_id and
    i18n_ts.language_code_id = :langCodeId
  left join i18n_template_substitution as i18n_ts_def on
    i18n_ts_def.template_variable_id = tv.template_variable_id and
    i18n_ts_def.language_code_id = :defaultLangCodeId
where
  tv.template_id in (\<templateIds\>) and
  (i18n_ts.substitution_value is not null or i18n_ts_def.substitution_value is not null)
>>

select_all_templates() ::= <<
select t.template_id,
       t.template_code,
       t.template_text,
       t.revision_id as template_revision_id,
       tt.template_type_code as template_type,
       tv.template_variable_id,
       tv.variable_name,
       lc.iso_language_code,
       ts.i18n_template_substitution_id as substitution_id,
       ts.substitution_value,
       ts.revision_id as substitution_revision_id
  from template t
  join template_type as tt on tt.template_type_id = t.template_type_id
  left join template_variable as tv on tv.template_id = t.template_id
  left join i18n_template_substitution as ts on ts.template_variable_id = tv.template_variable_id
  left join language_code as lc on lc.language_code_id = ts.language_code_id
>>

queryTemplatesByIds(templateIds) ::= <<
<select_all_templates()> where t.template_id in (<templateIds>)
>>
