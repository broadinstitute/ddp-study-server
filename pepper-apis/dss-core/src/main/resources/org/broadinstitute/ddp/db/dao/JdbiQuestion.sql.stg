group JdbiQuestion;

all_questions_select() ::= <<
select qt.question_type_code as question_type,
       qsc.stable_id,
       q.question_id,
       q.study_activity_id as activity_id,
       q.question_prompt_template_id as prompt_template_id,
       q.tooltip_template_id,
       q.info_header_template_id,
       q.info_footer_template_id,
       q.is_restricted,
       q.is_deprecated,
       q.is_write_once,
       q.hide_number,
       q.revision_id,
       rev.start_date as revision_start,
       rev.end_date   as revision_end
  from question as q
  join question_type as qt on qt.question_type_id = q.question_type_id
  join question_stable_code as qsc on qsc.question_stable_code_id = q.question_stable_code_id
  join revision as rev on rev.revision_id = q.revision_id
>>

queryLatestDtoByStudyIdAndQuestionStableId() ::= <<
<all_questions_select()>
where qsc.umbrella_study_id = :studyId
  and qsc.stable_id = :questionStableId
  and rev.end_date is null
>>

queryLatestDtosByStudyIdAndQuestionStableIds(questionStableIds) ::= <<
<all_questions_select()>
where qsc.umbrella_study_id = :studyId
  and qsc.stable_id in (<questionStableIds>)
  and rev.end_date is null
>>

queryQuestionIdByStableIdAndInstanceGuid() ::= <<
select q.question_id
  from question as q
  join question_stable_code as qsc on qsc.question_stable_code_id = q.question_stable_code_id
  join revision as rev on rev.revision_id = q.revision_id
  join activity_instance as ai on ai.study_activity_id = q.study_activity_id
 where qsc.stable_id = :stableId
   and ai.activity_instance_guid = :instanceGuid
   and rev.start_date \<= ai.created_at
   and (rev.end_date is null or ai.created_at \< rev.end_date)
>>

select_all_question_dtos() ::= <<
select qt.question_type_code as question_type,
       qsc.stable_id,
       q.question_id,
       q.study_activity_id as activity_id,
       q.question_prompt_template_id as prompt_template_id,
       q.tooltip_template_id,
       q.info_header_template_id,
       q.info_footer_template_id,
       q.is_restricted,
       q.is_deprecated,
       q.is_write_once,
       q.hide_number,
       q.revision_id,
       rev.start_date as revision_start,
       rev.end_date   as revision_end,
       coalesce(
         dq.placeholder_template_id, nq.placeholder_template_id, dcq.placeholder_template_id, tq.placeholder_template_id
       ) as placeholder_template_id,

       dcq.scale,

       bq.true_template_id,
       bq.false_template_id,

       (select date_render_mode_code from date_render_mode
         where date_render_mode_id = dq.date_render_mode_id
       ) as date_render_mode,
       dq.display_calendar,
       dqmp.date_question_id as dqmp_id,
       dqmp.use_month_names,
       dqyp.date_question_id as dqyp_id,
       dqyp.years_forward,
       dqyp.years_back,
       dqyp.year_anchor,
       dqyp.first_selected_year,
       dqyp.allow_future_years,
       (select group_concat(dft.date_field_type_code order by dqfo.display_order asc separator ',')
          from date_question_field_order as dqfo
          join date_field_type as dft on dft.date_field_type_id = dqfo.date_field_type_id
         where dqfo.date_question_id = dq.question_id
       ) as date_fields,

       (select group_concat(mt.mime_type_code separator ',')
          from mime_type mt
          join file_question__mime_type fqmt on fqmt.mime_type_id = mt.mime_type_id
          where fqmt.file_question_id = fq.question_id
       ) as mime_types,
       fq.max_file_size,

       (select picklist_select_mode_code from picklist_select_mode
         where picklist_select_mode_id = pq.picklist_select_mode_id
       ) as picklist_select_mode,
       (select picklist_render_mode_code from picklist_render_mode
         where picklist_render_mode_id = pq.picklist_render_mode_id
       ) as picklist_render_mode,
       pq.picklist_label_template_id,

       (select matrix_select_mode_code from matrix_select_mode
         where matrix_select_mode_id = mq.matrix_select_mode_id
       ) as matrix_select_mode,

       mq.render_modal,
       mq.modal_template_id,

       (select text_question_input_type_code from text_question_input_type
         where text_question_input_type_id = tq.input_type_id
       ) as input_type,
       (select suggestion_type_code from suggestion_type
         where suggestion_type_id = tq.suggestion_type_id
       ) as suggestion_type,
       tq.confirm_entry,
       tq.confirm_prompt_template_id,
       tq.mismatch_message_template_id,
       tq.confirm_placeholder_template_id,

       cq.allow_multiple,
       cq.unwrap_on_export,
       cq.add_button_template_id,
       cq.additional_item_template_id,
       (select orientation_type_code from orientation_type
         where orientation_type_id = cq.child_orientation_type_id
       ) as child_orientation

  from question as q
  join question_type as qt on qt.question_type_id = q.question_type_id
  join question_stable_code as qsc on qsc.question_stable_code_id = q.question_stable_code_id
  join revision as rev on rev.revision_id = q.revision_id
  left join boolean_question as bq on bq.question_id = q.question_id
  left join date_question as dq on dq.question_id = q.question_id
  left join date_question_month_picklist as dqmp on dqmp.date_question_id = dq.question_id
  left join date_question_year_picklist as dqyp on dqyp.date_question_id = dq.question_id
  left join numeric_question as nq on nq.question_id = q.question_id
  left join decimal_question as dcq on dcq.question_id = q.question_id
  left join picklist_question as pq on pq.question_id = q.question_id
  left join matrix_question as mq on mq.question_id = q.question_id
  left join text_question as tq on tq.question_id = q.question_id
  left join composite_question as cq on cq.question_id = q.question_id
  left join file_question as fq on fq.question_id = q.question_id
>>

queryQuestionDtosByIds(questionIds) ::= <<
<select_all_question_dtos()> where q.question_id in (<questionIds>)
>>
