group ParticipantDao;

select_all_enrollments_with_user_profile_address_providers() ::= <<
select en.user_study_enrollment_id as enrollment_id,
       en.valid_from,
       en.study_id,
       (select guid from umbrella_study where umbrella_study_id = en.study_id) as study_guid,
       (select enrollment_status_type_code from enrollment_status_type where enrollment_status_type_id = en.enrollment_status_type_id) as enrollment_status,
       u.user_id              as u_user_id,
       u.guid                 as u_user_guid,
       u.hruid                as u_user_hruid,
       u.legacy_altpid        as u_legacy_altpid,
       u.legacy_shortid       as u_legacy_shortid,
       u.is_locked            as u_is_locked,
       u.created_by_client_id as u_created_by_client_id,
       u.auth0_tenant_id      as u_auth0_tenant_id,
       u.auth0_user_id        as u_auth0_user_id,
       u.created_at           as u_created_at,
       u.updated_at           as u_updated_at,
       u.expires_at           as u_expires_at,
       u.email                as u_email,
       up.user_id               as p_user_id,
       up.first_name            as p_first_name,
       up.last_name             as p_last_name,
       up.sex                   as p_sex,
       up.birth_date            as p_birth_date,
       up.do_not_contact        as p_do_not_contact,
       up.is_deceased           as p_is_deceased,
       up.time_zone             as p_time_zone,
       up.preferred_language_id as p_preferred_language_id,
       up.skip_language_popup as p_skip_language_popup,
       (select iso_language_code from language_code where language_code_id = up.preferred_language_id) as p_iso_language_code,
       addr.address_id   as a_id,
       addr.address_guid as a_guid,
       addr.name         as a_name,
       addr.street1      as a_street1,
       addr.street2      as a_street2,
       addr.city         as a_city,
       addr.postal_code  as a_zip,
       addr.pluscode     as a_pluscode,
       addr.phone        as a_phone,
       addr.description  as a_description,
       addr.address_id is not null as a_is_default,
       coalesce((select code from country_subnational_division where country_subnational_division_id = addr.subnational_division_id), addr.state) as a_state,
       (select code from country_address_info where country_address_info_id = addr.country_id) as a_country,
       (select code from mailing_address_validation_status where mailing_address_validation_status_id = addr.validation_status_id) as a_status,
       mp.user_medical_provider_id   as m_user_medical_provider_id,
       mp.user_medical_provider_guid as m_user_medical_provider_guid,
       mp.user_id                    as m_user_id,
       mp.umbrella_study_id          as m_umbrella_study_id,
       mp.physician_name             as m_physician_name,
       mp.institution_name           as m_institution_name,
       mp.city                       as m_city,
       mp.state                      as m_state,
       mp.postal_code                as m_postal_code,
       mp.phone                      as m_phone,
       mp.legacy_guid                as m_legacy_guid,
       mp.street                     as m_street,
       (select institution_type_code from institution_type where institution_type_id = mp.institution_type_id) as m_institution_type_code,
       i.invitation_id as i_invitation_id,
       it.invitation_type_code as i_invitation_type_code,
       i.user_id as i_user_id,
       i.invitation_guid as i_invitation_guid,
       i.study_id as i_study_id,
       i.created_at as i_created_at,
       i.voided_at as i_voided_at,
       i.verified_at as i_verified_at,
       i.accepted_at as i_accepted_at,
       i.contact_email as i_contact_email,
       i.notes as i_notes
  from user_study_enrollment as en
  join user as u on u.user_id = en.user_id
  left join user_profile as up on up.user_id = u.user_id
  left join default_mailing_address as def_addr on def_addr.participant_user_id = u.user_id
  left join mailing_address as addr on def_addr.address_id = addr.address_id
  left join user_medical_provider as mp on mp.user_id = u.user_id and mp.umbrella_study_id = en.study_id
  left join invitation as i on i.user_id = u.user_id and i.study_id = en.study_id
  left join invitation_type as it on i.invitation_type_id = it.invitation_type_id
>>

select_all_enrollments_with_user_profile() ::= <<
select en.user_study_enrollment_id as enrollment_id,
       en.valid_from,
       en.study_id,
       (select guid from umbrella_study where umbrella_study_id = en.study_id) as study_guid,
       (select enrollment_status_type_code from enrollment_status_type where enrollment_status_type_id = en.enrollment_status_type_id) as enrollment_status,
       u.user_id              as u_user_id,
       u.guid                 as u_user_guid,
       u.hruid                as u_user_hruid,
       u.legacy_altpid        as u_legacy_altpid,
       u.legacy_shortid       as u_legacy_shortid,
       u.is_locked            as u_is_locked,
       u.created_by_client_id as u_created_by_client_id,
       u.auth0_tenant_id      as u_auth0_tenant_id,
       u.auth0_user_id        as u_auth0_user_id,
       u.created_at           as u_created_at,
       u.updated_at           as u_updated_at,
       u.expires_at           as u_expires_at,
       u.email                as u_email,
       up.user_id               as p_user_id,
       up.first_name            as p_first_name,
       up.last_name             as p_last_name,
       up.sex                   as p_sex,
       up.birth_date            as p_birth_date,
       up.do_not_contact        as p_do_not_contact,
       up.is_deceased           as p_is_deceased,
       up.time_zone             as p_time_zone,
       up.preferred_language_id as p_preferred_language_id,
       up.skip_language_popup as p_skip_language_popup,
       (select iso_language_code from language_code where language_code_id = up.preferred_language_id) as p_iso_language_code
  from user_study_enrollment as en
  join user as u on u.user_id = en.user_id
  left join user_profile as up on up.user_id = u.user_id
>>

bulkQueryLatestEnrollmentsWithUserDataAndOrderedProvidersByStudyId(selectAll, byId, userIds, userGuids) ::= <<
<select_all_enrollments_with_user_profile_address_providers()>
where en.study_id = :studyId
  and en.valid_to is null
<if(!selectAll)>
<if(byId)>
  and u.user_id in (<userIds>)
<else>
  and u.guid in (<userGuids>)
<endif>
<endif>
order by u.user_id asc, mp.user_medical_provider_id asc
>>

bulkQueryLatestEnrollmentsWithUserProfileByStudyId(selectAll, byId, userIds, userGuids) ::= <<
<select_all_enrollments_with_user_profile()>
where en.study_id = :studyId
  and en.valid_to is null
<if(!selectAll)>
<if(byId)>
  and u.user_id in (<userIds>)
<else>
  and u.guid in (<userGuids>)
<endif>
<endif>
order by u.user_id asc
>>
