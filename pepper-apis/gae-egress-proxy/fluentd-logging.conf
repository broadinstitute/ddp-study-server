<source>
  @type tail
  <parse>
    @type regexp

    # Parse entire line as `message` but also grab the timestamp (`time` is the default capture name).
    # Stackdriver will treat `message` as the `textPayload` of the log entry.
    expression /^(?<message>(?<time>[^\|]*)\| .*)$/

    # Timestamp format follows Ruby syntax.
    time_format %Y/%m/%d %T
  </parse>
  path /var/log/squid/cache.log
  pos_file /var/lib/google-fluentd/pos/squid-cache.pos
  read_from_head true

  # This is the log name that shows up in Stackdriver.
  tag squid-cache
</source>

<source>
  @type tail
  <parse>
    @type regexp

    # Parse entire line as `message` but also pull out individual fields.
    # All of these will end up in the `jsonPayload` in Stackdriver log entry.
    expression /^(?<message>(?<time>[0-9]+[\.0-9]*) +(?<elapsed>[0-9]+) (?<source_ip>[0-9\.]+) (?<action>[A-Z_]+)\/(?<status_code>[0-9]+) (?<size>[0-9]+) (?<method>[A-Z]+) (?<url>[^ ]+) (?<username>[^ ]+) (?<peer_status>[^ ]+)/(?<peer_ip>[^ ]+) (?<mime>[^ ]+))/

    time_format %s.%L
    types elapsed:integer,size:integer,status_code:integer
  </parse>
  path /var/log/squid/access.log
  pos_file /var/lib/google-fluentd/pos/squid-access.pos
  read_from_head true
  tag squid-access
</source>
