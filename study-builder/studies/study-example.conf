{
  # The Auth0 tenant credentials.
  "tenant": {
    # The domain url, with a trailing slash at the end.
    "domain": "string",
    "mgmtClientId": "string",
    "mgmtSecret": "string"
  },

  # The umbrella that this study is part of.
  "umbrella": {
    "name": "string",
    "guid": "string"
  },

  # The main attributes for the study itself.
  "study": {
    "name": "string",
    "guid": "string",
    # This will be the contact email listed when viewing metadata about study.
    "studyEmail": "null | string",
    # This url is used in places like emails.
    "baseWebUrl": "string",
    # If this password is set, study will be gated by a password page.
    "irbPassword": "null | string",
    # This controls the precision of mailing address plus codes.
    "plusCodePrecision": "null | LEAST | LESS | MEDIUM | MORE | MOST",
    # Whether participant address plus codes can be retrieved via our public API.
    "shareParticipantLocation": "bool",
  },

  # The Auth0 client applications for the study, typically has a web application.
  #
  # For backwards-compatibility, singular `client` with object as value is also supported.
  "clients": [
    {
      # Deprecated. Clients no longer has a name.
      "name": "string",
      "id": "string",
      "secret": "string",
      # The url we redirect the user to after the server finishes processing a successful password reset.
      # Typically it is `<baseWebUrl>/password-reset-done`. This is used to infer which client to use when
      # the system needs to sign up a new user.
      #
      # Current restrictions:
      # - Only one client can have a redirect URL set.
      # - This client with the redirect URl must have a database connection.
      "passwordRedirectUrl": "string"   # Optional
    }
  ],

  # The admin user for this study.
  # This is used for creating certain configurations for the study where revisions are tracked.
  "adminUser": {
    "guid": "string"
  },

  # The study governance policy.
  # Optional, can be left out or set to null.
  "governance": {
    # PEX expression to specify if a new governed user should be created when the operator registers.
    # When this evaluates to true, a new participant user will be created and data will be associated with this new user.
    # When false, no new user will be created and no change will be made to operator.
    "shouldCreateGovernedUserExpr": "string",

    # Rules for age-up process, used for calculating date-of-majority
    # and determining if participant has reached moment of age-of-majority or not.
    # Only the first rule that applies to participant will be used.
    # Order of the listed rules will be the order they are executed in.
    "ageOfMajorityRules": [
      {
        # PEX expression to determine if this rule applies to participant.
        "condition": "string",
        # The age particpant needs to be to be considered age-of-majority.
        "age": "integer",
        # Optional, the number of months before participant's date-of-majority when we should start preparation process.
        "prepMonths": "integer"
      }
    ]
  },

  # Additional detail attributes for the study, e.g. for display by mobile apps.
  "studyDetails": [
    {
      "language": "string",
      "name": "string",
      "summary": "null | string"
    }
  ],

  # The list of languages supported by a study, the order is unimportant.
  # Each language is a 2-letter ISO language code, e.g. "en", "ru", "fr" etc , language name e.g. "English" and isDefault (true/false)
  # Optional, can be left out or set to null.
  "supportedLanguages": [
    {
      "language": "string",
      "name": "string",
      "isDefault": "bool"   # Optional, defaults to false.
    }
  ],

  # Additional settings. Optional.
  "settings": {
    # The error message to show if an attempt to check an invite is made and it fails for whatever reason.
    #
    # Optional.
    "inviteErrorTemplate": {
      # Template object
    },
    # Should enable Google Analytics? If enabled, then provide the token. Default to false.
    "analyticsEnabled": "bool",
    "analyticsToken": "null | string",
    # Should delete email events that can't be sent because participant has no email? Defaults to false.
    "shouldDeleteUnsendableEmails": "bool",

    # Should display popup for authenticated participants when they change their language? Defaults to false.
    "shouldDisplayLanguageChangePopup": "bool"
  },

  # Credentials for SendGrid service to use for study.
  "sendgrid": {
    "apiKey": "string",
    # This name and email will be the `from` field of outgoing emails to participants.
    "fromName": "string",
    "fromEmail": "string",
    # This provides the default to use if an email has the `-ddp.salutation-` substition but there's no first/last name for participant.
    "defaultSalutation": "string"
  },

  # List of sendgrid email configuration objects.
  #
  # These are used when creating legacy email templates in sendgrid, or to lookup emails for updating.
  # Note that sendgrid credentials should be configured for the study. See `sendgrid.apiKey` above.
  "sendgridEmails": [
    {
      # Identifier for the email template.
      #
      # This should be the same key used in `emails` config object in `vars.conf` that maps the key to a template id.
      "key": "string",

      # Name of the template.
      #
      # This will be use for BOTH the template name and version name when creating a new template.
      # Note that the name will not be updated when updating the email.
      "name": "string",

      # The email subject to use.
      #
      # This can be set to sendgrid's default of `<%subject%>`.
      "subject": "string",

      # Path to the email template HTML file, relative to the top-level study config file.
      "filepath": "string",

      # Whether to render the HTML file.
      #
      # If true, HTML file will be rendered using the Apache Velocity templating engine. Currently,
      # the entire vars config object is made available for templating. These values can be accessed
      # in the HTML file using Velocity's syntax, e.g. `$assetsBucketName` or `$auth0.domain`.
      #
      # Tip: Velocity's formal reference notation can be used, so that the syntax is much closer to
      # config file's syntax, e.g. `${assetsBucketName}` or `${auth0.domain}`.
      #
      # Including files is supported, but target file path must be in the same directory (or in a subdirectory)
      # as the file that's including it.
      #
      # Caution: if using render, make sure the HTML doesn't have usages of special characters like
      # `$` and `#` that has special meaning to Velocity.
      "render": "bool",

      #is it a sendgrid dynamic template
      "isDynamic": "bool"
    }
  ]

  # Kit configurations.
  #
  # Kits will be created for participants based on
  # 1. If participant is `enrolled` in study.
  # 2. If participant as a shippable mailing address.
  # 3. If participant satisfies the configuration rules here.
  #
  # Configuration may have multiple rules of the same type, but participant only needs to satisfy one rule of each type.
  # For example, if configuration has several COUNTRY rules and participant's country matches one of them, then they
  # will be considered eligible.
  "kits": [
    {
      "type": "SALIVA | BLOOD | TESTBOSTON",
      "quantity": "integer",    # This is typically `1`.
      "needsApproval": "bool",  # Does the kit require manual approval? Optional, defaults to false.
      "rules": [
        {
          "type": "PEX",
          "expression": "string"
        },
        {
          "type": "COUNTRY",
          # Currently, this is a 2-letter lowercase country code (e.g. `us`, `ca`, `pr`, etc).
          # The country code will be checked against the participant's default mailing address.
          "country": "string"
        },
        {
          "type": "ZIP_CODE",
          # Must have at least one zip code per rule.
          # Will be checked against the participant's default mailing address.
          "zipCodes": [ "string" ]
        }
      ],
      # Reoccurring schedule for additional kits. Optional.
      #
      # This control kits after the initial kit. Timing for schedule is based on the previous kit's
      # (approximate) shipping date. The time amounts require ISO-8601 duration syntax and supports
      # date duration (years, months, weeks, etc) as well as time (hours, minutes, etc). For example,
      # a time amount of "3 weeks" is written "P3W", and "2 days 2 hours" is "P2DT2H".
      #
      # For each occurrence, study events are executed when prep step time amount is reached. When the regular
      # time amount is reached, the individual opt-out expression is checked, the result of which will
      # determine whether to skip creating this occurrence's kit. The kit's original configuration
      # rules will also be checked for each occurrence.
      #
      # The opt-out expression is checked right before the first prep step or regular time amount.
      "schedule": {
        "numOccurrencesPerUser": "int", # How many more kits to do per user?
        "nextTimeAmount": "string",     # How long after the previous kit should the next kit be created?
        "nextPrepTimeAmount": "string", # Optional. How long after previous kit to prep for next kit?
        "optOutExpr": "pex",            # Optional. If true, then opt-out of the whole scheduling.
        "individualOptOutExpr": "pex"   # Optional. If true, then opt-out of this occurrence of the next kit.
      }
    }
  ],

  # List of activities to create for study.
  # Ordering in this list does not determine display order, etc -- that needs to be defined in activity definition itself.
  "activities": [
    {
      # Due to limitations of typesafe-config library, we can't use `include` feature when we're inside an array
      # and the included file has substitutions, so we're pointing to the filepath here.
      #
      # Note: the path is relative to directory of the current file.
      "filepath": "relative/path/to/about-you.conf",
      "mappings": [
        {
          "type": "DATE_OF_DIAGNOSIS",
          "stableId": "string"
        }
      ],

      # List of complex validations for the activity. Optional.
      "validations": [
        {
          "messageTemplate": {
            # Template object
          },
          "stableIds": ["strings"],   # List of question stable ids that this validation depends on.
          "precondition": "pex",      # If evaluates to true, this validation will be processed. Otherwise this validation is skipped.
          "expression": "pex"         # If evaluates to true, this validation will be displayed as error to user.
        }
      ]
    },
    {
      "filepath": "relative/path/to/consent.conf",
      "mappings": [
        {
          # Mapping types helps the server in figuring out consent status and other derived data for a participant.
          # This is especially used when curating participant data to be exported to Elasticsearch, which ends up being
          # the data study staff views via DSM's Data Browser.
          #
          # Note: different activities can have the same mapping type (i.e. we support multiple mappings).
          "type": "BLOOD | TISSUE | DATE_OF_BIRTH",
          "stableId": "string"
        }
      ]
    },
    {
      "filepath": "relative/path/to/release.conf",
      "mappings": [
        {
          "type": "MEDICAL_RELEASE",
          "stableId": null
        }
      ]
    },
    {
      "filepath": "relative/path/to/loved-one.conf",
      "mappings": []
    },
    {
      "filepath": "relative/path/to/followup-consent.conf",
      "mappings": []
    }
  ],

  # If set, this timestamp is used as the creation timestamp for above list of activities,
  # effectively becoming the start time of v1 of the activities.
  #
  # This is usually used for migration of existing studies.
  "activityTimestamp": "null | date-string",

  # Studies can customize the icons for activity instance status types.
  #
  # Currently, this is hosted within the server and not in external storage like Google Buckets,
  # so we point to the filepath here.
  "activityStatusIcons": [
    {
      # Note: the path is relative to directory of the current file.
      "filepath": "string",
      "statusType": "CREATED | IN_PROGRESS | COMPLETE"
    }
  ],

  "pdfs": [
    {
      # Configuration name, used as identifier for the pdf (e.g. for Download PDF API).
      "name": "string",
      # Name for the actual file when it gets downloaded.
      "filename": "string",
      # Name that shows up in DSM display of available PDFs to download for a participant.
      "displayName": "string",
      "mapping": {
        "type": "CONSENT | RELEASE"
      },

      "versions": [
        {
          "tag": "string",
          "start": "date-string",     # Optional, will default to current timestamp.
          "end": "date-string",       # Optional, will default to null.

          # List of data sources this particular version of the pdf pulls from.
          # E.g. if it pulls profile or mailing address data, then it should have `PARTICIPANT` data source.
          "sources": [
            {
              "type": "EMAIL | PARTICIPANT"
            },
            {
              "type": "ACTIVITY",
              "activityCode": "string",
              "versionTag": "string"
            }
          ],

          # Note: ordering is important and determines order in final rendered pdf.
          "files": [
            {
              # Note: the path is relative to directory of the current file.
              "filepath": "string",
              "type": "CUSTOM",
              "substitutions": [
                {
                  "type": "PROFILE",
                  "field": "string",
                  "profileField": "string"
                },
                {
                  "type": "ACTIVITY_DATE",
                  "field": "string",
                  "activityCode": "string"
                },
                {
                  "type": "TEXT | DATE",
                  "field": "string",
                  "activityCode": "string",
                  "questionStableId": "string"
                },
                {
                  "type": "BOOLEAN",
                  "field": "string",
                  "activityCode": "string",
                  "questionStableId": "string",
                  "checkIfFalse": "bool"
                }
              ]
            },
            {
              "filepath": "string",
              "type": "MAILING_ADDRESS",
              "fields": {
                "firstName": "string",
                "lastName": "string",
                "street": "string",
                "city": "string",
                "state": "string",
                "zip": "string",
                "country": "string",    # Optional
                "phone": "string"
              }
            },
            {
              "filepath": "string",
              "type": "PHYSICIAN",
              "fields": {
                "name": "string",
                "institution": "string",
                "city": "string",
                "state": "string",
                "street": "string",     # Optional
                "zip": "string",        # Optional
                "phone": "string"       # Optional
              }
            },
            {
              "filepath": "string",
              "type": "INITIAL_BIOPSY | INSTITUTION",
              "fields": {
                "institution": "string",
                "city": "string",
                "state": "string"
              }
            }
          ]
        }
      ]
    }
  ],

  "workflowTransitions": [
    {
      "from": {
        "type": "START | RETURN_USER"
      },

      # Note: ordering of `to` is important and determines order in which the next state is considered.
      "to": [
        {
          "type": "DONE | DASHBOARD | THANK_YOU | MAILING_LIST | INTERNATIONAL_PATIENTS",
          "expression": "string"
        },
        {
          "type": "ACTIVITY",
          "activityCode": "string",
          "expression": "string"
        }
      ]
    },
    {
      "from": {
        "type": "ACTIVITY",
        "activityCode": "string"
      },
      "to": [
        {
          "type": "ACTIVITY",
          "activityCode": "string",
          "expression": "string"
        }
      ]
    }
  ],

  "events": [
    # Basic configuration
    {
      "trigger": {
        # Trigger object
      },
      "action": {
        # Action object
      },
      # If set, then must satisfy this precondition before server executes the event occurrence.
      # Currently, if precondition evaluates to false, event will be re-queued.
      "preconditionExpr": "null | string",
      # If set, then server will delete event occurrence if this cancel expression evaluates to true.
      "cancelExpr": "null | string",
      # How many times can we execute this event for a user? No limit if null.
      "maxOccurrencesPerUser": "null | integer",
      # For events that are dispatched to Housekeeping (e.g. email events), how long should we wait before processing event occurrence?
      "delaySeconds": "null | integer",
      # Should we queue up event occurrence to be processed asynchronously?
      # Some triggers/actions require this to be true or false.
      "dispatchToHousekeeping": "bool",
      # If there's more than one action configured for the same trigger, in what order to execute them?
      "order": "integer"
    },

    #
    # Triggers
    #

    # Indicates an activity has reached a certain status.
    #
    # Typically paired with an `ACTIVITY_INSTANCE_CREATION` action to automate creating the next activity in workflow,
    # or paired with an email action to queue up reminder or thank-you emails.
    {
      "trigger": {
        "type": "ACTIVITY_STATUS",
        "activityCode": "string",
        "statusType": "CREATED | IN_PROGRESS | COMPLETE"
      },
      # ...
    },

    # Indicates participant's status has changed to `consent_suspended`.
    {
      "trigger": {
        "type": "CONSENT_SUSPENDED"
      },
      # ...
    },

    # Indicates DSM has notified server of a participant event.
    #
    # Typically paired with an email action so participant will get notified.
    {
      "trigger": {
        "type": "DSM_NOTIFICATION",
        "dsmEvent": """SALIVA_RECEIVED | BLOOD_RECEIVED | BLOOD_SENT | BLOOD_SENT_4WK
                  | TESTBOSTON_SENT | TESTBOSTON_DELIVERED | TESTBOSTON_RECEIVED | TEST_RESULT"""
      },
      # ...
    },

    # Indicates that participant has requested to withdraw from study.
    #
    # This only indicates a request, not actual withdrawal. Therefore, it should be paired with the `STUDY_EMAIL` action
    # to send study staff an email about the request so they can process it.
    {
      "trigger": {
        "type": "EXIT_REQUEST"
      },
      # ...
    },

    # Indicates a governed participant has finished registering an Auth0 account for themselves
    # and has taken ownership of their data.
    {
      "trigger": {
        "type": "GOVERNED_USER_REGISTERED"
      },
      # ...
    },

    # Indicates a new invitation has been created for participant.
    #
    # Typically paired with `INVITATION_EMAIL` action to communicate with governed participant.
    {
      "trigger": {
        "type": "INVITATION_CREATED"
      },
      # ...
    },

    # Indicates a new email has joined a study's mailing list.
    #
    # Typically paired with an email action, see `SENDGRID_EMAIL` action.
    {
      "trigger": {
        "type": "JOIN_MAILING_LIST"
      },
      # ...
    },

    # Indicates the preparation time for the next longitudinal kit is reached.
    #
    # Typically paired with an email action, see `SENDGRID_EMAIL` action.
    {
      "trigger": {
        "type": "KIT_PREP"
      },
      # ...
    },

    # Indicates an auth0 login account has been created for the user.
    #
    # Typically paired with an email action, see `SENDGRID_EMAIL` action.
    {
      "trigger": {
        "type": "LOGIN_ACCOUNT_CREATED"
      },
      # ...
    },

    # Indicates medical information (like mailing address, physicians, hospitals) are updated.
    #
    # Typically paird with `PDF_GENERATION` action to regenerate medical-release pdfs.
    {
      "trigger": {
        "type": "MEDICAL_UPDATE"
      },
      # ...
    },

    # Indicates governed participant has reached age-of-majority.
    #
    # Typically paired with `INVITATION_EMAIL` action to notify governed participant to register.
    # See `governance.ageOfMajorityRules` above.
    {
      "trigger": {
        "type": "REACHED_AOM"
      },
      # ...
    },

    # Indicates governed participant has reached preparation time to prepare them for their age-of-majority.
    #
    # Preparation time is usually within months. See `governance.ageOfMajorityRules` above.
    {
      "trigger": {
        "type": "REACHED_AOM_PREP"
      },
      # ...
    },

    # Indicates user used the Resend Email feature, which is a public API, but user is not in the study.
    #
    # Typically paired with an email action, letting the user know and asking them register instead.
    # See the `WORKFLOW_STATE` trigger type.
    {
      "trigger": {
        "type": "USER_NOT_IN_STUDY"
      },
      # ...
    },

    # Indicates user has finished registering Auth0 account.
    #
    # Can be paired with an email action to send a "welcome" email.
    {
      "trigger": {
        "type": "USER_REGISTERED"
      },
      # ...
    },

    # Indicates a workflow state.
    #
    # Typically paired with an email action, and along with the Resend Email feature,
    # which is used to figure out what workflow state a user should go to next, what activity that is,
    # and then send an email to user allowing them to effectively "pick up where they left off".
    {
      "trigger": {
        "type": "WORKFLOW_STATE",
        "activityCode": "string"
      },
      # ...
    },

    #
    # Actions
    #

    # Create a new instance of an activity.
    {
      "action": {
        "type": "ACTIVITY_INSTANCE_CREATION",
        "activityCode": "string"
      },
      "dispatchToHousekeeping": "false",  # Action handled synchronously.
      # ...
    },

    # Queue up an announcement message for user.
    #
    # Typically the message is read by client applications when user is on the app's dashboard.
    {
      "action": {
        "type": "ANNOUNCEMENT",
        "permanent": "bool",        # Should it be a persistent message? Optional, defaults to false.
        "createForProxies": "bool", # Create for all active proxies instead of the participant? Optional, defaults to false.
        "msgTemplate": {
          # Template object
        }
      },
      "dispatchToHousekeeping": "false",  # Action handled synchronously.
      # ...
    },

    # Copy data from one location to another.
    #
    # Current limitations:
    # - `source` location is limited to `ANSWER` type.
    # - If both source/target is `ANSWER` type, then question type must match.
    # - Copying for top-level composite questions is not supported,
    #   map the composite child questions as source/target pairs instead.
    # - Cannot copy composite child questions to non-composite questions, even if question type matches.
    #
    # If the trigger is `ACTIVITY_STATUS`, then the triggering activity instance will be used
    # as the source or target location for copying.
    {
      "action": {
        "type": "COPY_ANSWER",
        # List of copy configuration source/target pairs, each specifying where to copy data from/to.
        "copyConfigPairs": [
          {
            "source": {
              "type": "ANSWER",
              "questionStableId": "string"
            },
            "target": {
              "type": "CopyLocationType",
              "questionStableId": "string"    # Optional if `type` is not `ANSWER`
            }
          }
        ]
      },
      "dispatchToHousekeeping": "false",  # Action handled synchronously.
      # ...
    },

    # Create new age-up invitation.
    {
      "action": {
        "type": "CREATE_INVITATION",
        "markExistingAsVoided": "bool",           # Should existing invitations be voided?
        "contactEmailQuestionStableId": "string"  # Which question to pull the contact email from?
      },
      "dispatchToHousekeeping": "false",  # Action handled synchronously.
      # ...
    },

    # Hide activity instances.
    {
      "action": {
        "type": "HIDE_ACTIVITIES",
        "activityCodes": ["strings"]
      },
      "dispatchToHousekeeping": "false",  # Action handled synchronously.
      # ...
    },

    # Send an invitation email, which will provide the invitation guid as an email substitution.
    #
    # Participant must have an existing non-voided invitation. The latest valid invitation will be used,
    # and its associated contact email will be where the email is sent.
    #
    # If trigger is `INVITATION_CREATED`, then the newly created invitation will be used.
    {
      "action": {
        "type": "INVITATION_EMAIL",
        "emailTemplate": "string",  # Deprecated. Please use `templates`.
        "language": "string",       # Deprecated. Please use `templates`.
        "templates": [
          {
            "emailTemplate": "string",  # SendGrid email template id.
            "language": "string",       # Language ISO code of template.
            "isDynamic": boolean        # Is it a sendgrid dynamic template.
          }
        ],
        "pdfAttachments": []
      },
      "dispatchToHousekeeping": "true",   # Must be dispatched.
      # ...
    },

    # Mark activity instances as read-only.
    {
      "action": {
        "type": "MARK_ACTIVITIES_READ_ONLY",
        "activityCodes": ["strings"]
      },
      "dispatchToHousekeeping": "false",  # Action handled synchronously.
      # ...
    },

    # Generates a pdf and cache in storage like Google Buckets.
    {
      "action": {
        "type": "PDF_GENERATION",
        "pdfName": "string"
      },
      "dispatchToHousekeeping": "true",   # Must be dispatched.
      # ...
    },

    # Set all proxy relationships for a governed participant to inactive.
    #
    # This is typically done once governed participant has registered for themselves and taken ownership of their data.
    {
      "action": {
        "type": "REVOKE_PROXIES"
      },
      "dispatchToHousekeeping": "false",   # Action handled synchronously.
      # ...
    },

    # Send an email.
    #
    # If participant is a governed user with no associated Auth0 email, the email will be sent to their proxy.
    {
      "action": {
        "type": "SENDGRID_EMAIL",
        "emailTemplate": "string",  # Deprecated. Please use `templates`.
        "language": "string",       # Deprecated. Please use `templates`.
        "templates": [
          {
            "emailTemplate": "string",  # SendGrid email template id.
            "language": "string",       # Language ISO code of template.
            "is_dynamic": boolean       # Is it a sendgrid dynamic template.
          }
        ],
        "linkedActivityCode": "string",  # Find latest activity instance guid to use as email substitution.
        "pdfAttachments": [
          {
            "pdfName": "string",
            "generateIfMissing": "true"   # This flag is deprecated. Can leave as `true`.
          }
        ]
      },
      "dispatchToHousekeeping": "true",   # Must be dispatched.
      # ...
    },

    # Send an email to study staff, using the configured `sendgrid.fromEmail` as the recipient `to` email.
    {
      "action": {
        "type": "STUDY_EMAIL",
        "emailTemplate": "string",  # Deprecated. Please use `templates`.
        "language": "string",       # Deprecated. Please use `templates`.
        "templates": [
          {
            "emailTemplate": "string",  # SendGrid email template id.
            "language": "string",       # Language ISO code of template.
            "is_dynamic": boolean       # Is it a sendgrid dynamic template.
          }
        ],
        "pdfAttachments": []
      },
      "dispatchToHousekeeping": "true",   # Must be dispatched.
      # ...
    },

    # Marks the participant status as `enrolled`.
    #
    # Having `enrolled` status unlocks several things, mostly in DSM.
    {
      "action": {
        "type": "USER_ENROLLED"
      },
      "dispatchToHousekeeping": "false",  # Action handled synchronously.
      # ...
    },
  ]
}
